import heapq

class Node:
    def __init__(self, parent, position, g, h):
        self.parent = parent
        self.position = position
        self.g = g
        self.h = h
        self.f = g + h
    
    # Comparison function to determine priority in the priority queue
    def __lt__(self, other):
        return self.f < other.f

def a_star(matrix, start_loc, end_loc):
    open_list = []
    closed_set = set()
    # Correct initialization of start_node
    start_node = Node(None, start_loc, 0, 0)  # Set g to 0
    end_node = Node(None, end_loc, 0, 0)
    # Push the starting node to the open list with its priority
    heapq.heappush(open_list, (start_node.f, start_node))
    
    while open_list:
        current = heapq.heappop(open_list)[1]
        # Add the current node's position to the closed_set
        closed_set.add(current.position)
        # Check if we have reached the goal
        if current.position == end_loc:
            path = []
            cost = current.g  # The cost of the path
            # Reconstruct the path by traversing the parent pointers
            while current:
                path.append(current.position)
                current = current.parent
            path.reverse()
            return path, cost
        
        directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
        for direction in directions:
            new_position = (
                current.position[0] + direction[0], current.position[1] + direction[1]
            )
            # Check if the neighbor is out of bounds or blocked by an obstacle
            if (
                new_position[0] < 0
                or new_position[0] >= len(matrix[0])
                or new_position[1] < 0
                or new_position[1] >= len(matrix)
                or matrix[new_position[0]][new_position[1]] != 0
                or new_position in closed_set  # Check if the new position is already in the closed set
            ):
                continue
            new_node = Node(
                current, new_position, current.g + 1,  # Update g value correctly
                abs(new_position[0] - end_loc[0]) + abs(new_position[1] - end_loc[1])
            )
            # Check if position is already present in open list
            if any(node.position == new_node.position for _, node in open_list):
                continue
            heapq.heappush(open_list, (new_node.f, new_node))
    
    return [], float('inf')  # Return an empty path and infinite cost if no path is found

# Example usage:
matrix = [
    [0, 0, 0, 1],
    [1, 0, 0, 1],
    [0, 0, 0, 1],
    [0, 1, 0, 0]
]
start_pos = (0, 0)
end_pos = (3, 3)
path, cost = a_star(matrix, start_pos, end_pos)
if path:
    print("Path found:", path)
    print("Minimum Path Cost:", cost)
else:
    print("No path found.")




Explain :
Node Class:
The Node class represents a node in the search space. It contains attributes like parent (the parent node in the search), position (coordinates of the node in the matrix), g (the cost from the start node to this node), h (the heuristic estimate from this node to the goal), and f (the total estimated cost g + h).
A Algorithm Function (a_star):*
The a_star function takes a matrix representing the grid, the start location (start_loc), and the end location (end_loc) as inputs.
It initializes an open list (priority queue) and a closed set to keep track of visited nodes.
It creates a start_node and an end_node, and adds the start node to the open list with its priority (f value).
The main loop continues until the open list is empty:
It pops the node with the lowest f value from the open list.
If this node is the goal node, it reconstructs the path by following the parent pointers and returns the path and its cost.
Otherwise, it explores the neighbors of the current node (up, down, left, right) if they are valid and not already visited.
For each valid neighbor, it creates a new node, calculates its f value (g + h), and adds it to the open list if it's not already there.
If no path is found, it returns an empty path and an infinite cost.
Example Usage:
It provides an example usage by defining a matrix representing a grid with obstacles (1s) and free spaces (0s), and specifies start and end positions.
It calls the a_star function with these inputs and prints the path and minimum path cost if a path is found; otherwise, it prints "No path found."
