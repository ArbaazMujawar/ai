from collections import deque

class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list
    
    def get_neighbors(self, v):
        return self.adjacency_list[v]
    
    def h(self, n):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1
        }
        return H[n]
    
    def a_star_algorithm(self, start_node, stop_node):
        open_list = set([start_node])
        closed_list = set([])
        g = {}
        g[start_node] = 0
        parents = {}
        parents[start_node] = start_node
        
        while len(open_list) > 0:
            n = None
            for v in open_list:
                if n == None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v
            if n == None:
                print('Path does not exist!')
                return None
            if n == stop_node:
                reconst_path = []
                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]
                reconst_path.append(start_node)
                reconst_path.reverse()
                print('Path found: {}'.format(reconst_path))
                return reconst_path
            
            for (m, weight) in self.get_neighbors(n):
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                    if m in closed_list:
                        closed_list.remove(m)
                        open_list.add(m)
            open_list.remove(n)
            closed_list.add(n)
        
        print('Path does not exist!')
        return None

adjacency_list = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}
graph1 = Graph(adjacency_list)
graph1.a_star_algorithm('A', 'D')

"""
Explain
This code implements the A* algorithm for finding the shortest path in a graph from a start node to a stop node. Here's a breakdown of how it works:

Import Statement:
The code imports the deque class from the collections module, although it is not used in the provided code.
Graph Class:
The Graph class is defined with an __init__ method that takes an adjacency_list as input.
The adjacency_list represents the graph, where each key is a node, and the corresponding value is a list of tuples representing the neighboring nodes and their weights.
get_neighbors Method:
The get_neighbors method takes a node v as input and returns its neighbors and their weights from the adjacency_list.
h Method (Heuristic Function):
The h method defines a heuristic function H that assigns heuristic values to nodes.
In this case, it returns heuristic values for nodes 'A', 'B', 'C', and 'D'.
a_star_algorithm Method (A Algorithm Implementation):*
The a_star_algorithm method implements the A* algorithm to find the shortest path from start_node to stop_node.
It initializes open_list (set of nodes to be evaluated), closed_list (set of evaluated nodes), g (dictionary to store cost from start to each node), and parents (dictionary to store parent nodes for path reconstruction).
The algorithm iteratively evaluates nodes based on their cost (g value) and heuristic (h value) until it finds the shortest path or determines that no path exists.
It updates g and parents for each evaluated node and manages open_list and closed_list accordingly.
If a path is found, it reconstructs and prints the path.
Example Usage:
An adjacency_list representing a graph is defined.
An instance of the Graph class (graph1) is created with this adjacency list.
The a_star_algorithm method is called on graph1 with start node 'A' and stop node 'D' to find the shortest path.
Overall, this code demonstrates how to implement the A* algorithm for pathfinding in a graph, considering both the cost from the start node (g value) and a heuristic estimate (h value) to guide the search efficiently.
"""