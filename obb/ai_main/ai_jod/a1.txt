def dfs(visited,graph,node):
    if node not in visited:
        print(node,end = " ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

def bfs(visited,graph,node,queue):
    visited.add(node)
    queue.append(node)

    while queue:
        s = queue.pop(0)
        print(s,end = " ")
        for neighbour in graph[s]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

def main():
    visited1 = set() # TO keep track of DFS visited nodes
    visited2 = set() # TO keep track of BFS visited nodes
    queue = []       # For BFS
    n = int(input("Enter number of nodes : "))
    graph = dict()

    for i in range(1,n+1):
        edges = int(input("Enter number of edges for node {} : ".format(i)))
        graph[i] = list()
        for j in range(1,edges+1):
            node = int(input("Enter edge {} for node {} : ".format(j,i)))
            graph[i].append(node)

    print("The following is DFS")
    dfs(visited1, graph, 1)
    print()
    print("The following is BFS")
    bfs(visited2, graph, 1, queue)

if __name__=="__main__":
    main()



Explain:
DFS Function (Depth-First Search):
dfs(visited, graph, node) is a recursive function that performs a depth-first traversal of the graph starting from the given node.
visited is a set that keeps track of visited nodes to avoid revisiting them.
graph is a dictionary representing the graph, where keys are nodes and values are lists of adjacent nodes.
node is the current node being processed.
If the node is not in the visited set, it prints the node, adds it to visited, and recursively calls dfs on its neighbors.
BFS Function (Breadth-First Search):
bfs(visited, graph, node, queue) performs a breadth-first traversal of the graph starting from the given node using a queue.
visited is a set to track visited nodes.
graph is the graph representation.
node is the starting node for BFS.
queue is a list used as a queue for BFS traversal.
It starts by adding the node to visited and queue. Then, while the queue is not empty, it dequeues nodes, prints them, and enqueues their unvisited neighbors.
Main Function:
main() is the entry point of the program.
It initializes empty sets visited1 and visited2 for DFS and BFS respectively, and an empty queue for BFS.
Takes input for the number of nodes (n) in the graph and then iteratively asks for the number of edges for each node and their connections.
It then calls dfs and bfs functions with appropriate parameters to traverse and print the graph using both DFS and BFS starting from node 1.
